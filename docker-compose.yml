#########################################################################################
#   ___  _ _    ___          _             ___           _                        _
#  / _ \| | |  |   \ ___  __| |_____ _ _  |   \ ___ _ __| |___ _  _ _ __  ___ _ _| |_
# | (_) |_  _| | |) / _ \/ _| / / -_) '_| | |) / -_) '_ \ / _ \ || | '  \/ -_) ' \  _|
#  \__\_\ |_|  |___/\___/\__|_\_\___|_|   |___/\___| .__/_\___/\_, |_|_|_\___|_||_\__|
#                                                  |_|         |__/
#
#  NOTE: To use this file in a local development environment you need to run the
#  following commands:
#
#  Symlink the docker-compose.dev.override.yml file to docker-compose.override.yml:
#
#    `ln -sf docker-compose.dev.override.yml docker-compose.override.yml`
#
#  For MacOS with Apple Silicon, run:
#
#    `ln -sf docker-compose.dev-macos.override.yml docker-compose.override.yml`
#
#  Then build a local instance of the containers (optional if you want to use the containers
#  from the ECR docker repo):
#
#    `docker-compose -f docker-compose.build.yml build`
#
#  For MacOS with Apple Silicon, run:
#
#    `docker-compose build`
#
#  (optional) Or to build specified image (service `api` in this case):
#
#    `docker-compose -f docker-compose.build.yml build api`
#
#  To start all the containers then run:
#
#    `docker-compose up`
#
#  (optional) Or to start a specified container then run (service `api` in this case):
#
#    `docker-compose up api`
#
#  If encounter `network discovery declared as external, but could not be found`, run and retry:
#
#    `docker network create discovery`
#
#  Use the -d flag if you want it to run in the background but it is suggested to
#  not do that so that the containers will stop with you session and you can more easily
#  see the log files.
#
#  @see docker-compose.build.yml for build configuration.
#
#########################################################################################

version: '3.6'
services:
  ai-european-football-api:
    restart: unless-stopped
    image: "314646722731.dkr.ecr.ca-central-1.amazonaws.com/q4/io_quarter4_prediction_european_football_api:${CI_GIT_BRANCH_TYPE_NAME}"
    container_name: "${PROJECT_NAME}_api"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:80/" ]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 40s
    networks:
      default:
      discovery-external:
    environment:
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - PROJECT_NAME=${PROJECT_NAME}
    labels:
      - 'traefik.enable=true'
      #- 'traefik.frontend.rule=Host:${PROJECT_DOMAIN}'
      # hard coded host so that it merges with the existing url.
      - 'traefik.frontend.rule=Host:next.predictionapi.develop.quarter4.io; PathPrefix:/european-football'
      - 'traefik.port=80'
      - 'traefik.backend=${PROJECT_NAME}_api'
      - 'traefik.docker.network=${CI_SERVER_DOCKER_NETWORK}'
    command: [ "sh",  "-c", "cd /ai_european_football/docker_api && uvicorn api.main:api --reload --host 0.0.0.0 --port 80 --workers 6 --limit-concurrency 100" ]
  #    command: [ "sh", "-c",  "cd /ai_european_football/docker_api && gunicorn --workers 4 --bind '0.0.0.0:80' --log-level debug --worker-class uvicorn.workers.UvicornWorker api.main:api --reload" ]

  ai-european-football-backend-tf2-16:
    restart: unless-stopped
    image: "314646722731.dkr.ecr.ca-central-1.amazonaws.com/q4/io_quarter4_prediction_european_football_tf2_16:${CI_GIT_BRANCH_TYPE_NAME}"
    container_name: "${PROJECT_NAME}_tf2_16"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:80/" ]
      interval: 10m
      timeout: 10s
      retries: 3
      start_period: 5m
    networks:
      default:
    environment:
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - PROJECT_NAME=${PROJECT_NAME}
    security_opt:
      - seccomp:unconfined
    #ports:
    #  - "40210:80"
    command: [ "sh", "-c",  "cd /ai_european_football/docker_tf2_16 && uvicorn app.main:app --reload --host 0.0.0.0 --port 80 --workers 6 --limit-concurrency 100" ]
#    command: [ "sh", "-c",  "cd /ai_european_football/docker_tf2_16 && gunicorn --workers 4 --bind '0.0.0.0:80' --log-level debug --worker-class uvicorn.workers.UvicornWorker app.main:app --reload" ]

networks:
  discovery-external:
    name: ${CI_SERVER_DOCKER_NETWORK}
    external: true
